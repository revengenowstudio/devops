name: XNA Sprite Font Compile
on:
  workflow_dispatch:
    inputs:
      schema-path:
        description: "Path to spritefont schema file"
        required: true
        default: "SpriteFont0.spritefont"

jobs:
  compile:
    runs-on: windows-latest
    steps:
      - name: Check some net4 files
        shell: bash
        run: |
          problematicDlls=(
            "C:/Windows/Microsoft.Net/assembly/GAC_64/System.Data/v4.0_4.0.0.0__b77a5c561934e089/System.Data.dll"
            "C:/Windows/Microsoft.Net/assembly/GAC_64/System.Transactions/v4.0_4.0.0.0__b77a5c561934e089/System.Transactions.dll"
            "C:/Windows/Microsoft.Net/assembly/GAC_64/System.EnterpriseServices/v4.0_4.0.0.0__b03f5f7f11d50a3a/System.EnterpriseServices.dll"
            "C:/Windows/Microsoft.Net/assembly/GAC_64/System.Web/v4.0_4.0.0.0__b03f5f7f11d50a3a/System.Web.dll"
            "C:/Windows/Microsoft.Net/assembly/GAC_64/System.Data.OracleClient/v4.0_4.0.0.0__b77a5c561934e089/System.Data.OracleClient.dll"
          )
          for dll in "${problematicDlls[@]}"; do
            path="$dll"
            rm -f "$path"
          done
      - name: Download Tool from github release latest using gh cli
        id: download-tool
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release download --repo revengenowstudio/XNAContentCompiler --pattern "XNAContentCompiler*.zip"
          # decompress zip file
          Expand-Archive -Path XNAContentCompiler*.zip -DestinationPath XNAContentCompiler
      # install msi from sdk/SharedFilesInstaller_File.msi
      - name: Install SharedFilesInstaller
        run: |
          $msiUrl = "https://github.com/revengenowstudio/XNAContentCompiler/raw/refs/heads/master/sdk/SharedFilesInstaller_File.msi"
          Invoke-WebRequest -Uri $msiUrl -OutFile "SharedFilesInstaller_File.msi"
          Start-Process msiexec.exe -ArgumentList '/i SharedFilesInstaller_File.msi /quiet /qn /norestart /log install.log' -Wait
          # show log
          Get-Content install.log
      # - name: Install Net4
      #   shell: pwsh
      #   run: |
      #     $downloadUrl = "https://download.microsoft.com/download/4/3/b/43b61315-b2ce-4f5b-9e32-34cca07b2f0e/NDP452-KB2901951-x86-x64-DevPack.exe"
      #     $output = "NDP452-KB2901951-x86-x64-DevPack.exe"
      #     Invoke-WebRequest -Uri $downloadUrl -OutFile $output
      #     Start-Process -FilePath $output -ArgumentList "/q /norestart" -Wait
      - name: Download and install XNA 4.0
        run: |
          $xnaUrl = "https://download.microsoft.com/download/a/c/2/ac2c903b-e6e8-42c2-9fd7-bebac362a930/xnafx40_redist.msi"
          Invoke-WebRequest -Uri $xnaUrl -OutFile "xnafx40_redist.msi"
          Start-Process msiexec.exe -ArgumentList '/i xnafx40_redist.msi /quiet /qn /norestart /log install.log' -Wait
          Get-Content install.log
      - name: Download schema file
        id: schema-info
        shell: bash
        run: |
          url="${{ inputs.schema-path }}"
          # get last part of url as filename
          filename=$(basename "$url")
          # check wether url is a github url, and if so, convert to raw url
          # check whether url contains 'raw/refs'
          if [[ "$url" == *"github.com"* && "$url" == *"/raw/refs"* ]]; then
            # replace 'blob' with 'raw/refs/heads'
            url="${url/\/blob\//\/raw\/refs\/heads\/}"
          fi
          curl -L -o "$filename" "$url"
          echo "filename=$filename" >> $GITHUB_OUTPUT
          echo "input downloaded"
          # replace '.spriteFont' with '.xsd' in url
          url="${url/.spriteFont/.xsd}"
          curl -L -o "${filename/.spriteFont/.xsd}" "$url"
          ls
      # - name: Compile spritefont
      #   shell: pwsh
      #   run: |
      #     mkdir output
      #     ls ${{ steps.schema-info.outputs.filename }}
      #     $curPath = Get-Location
      #     $fileFullPath = "$curPath\${{ steps.schema-info.outputs.filename }}"
      #     .\XNAContentCompiler\XNA-CC-CLI.exe -i "$fileFullPath" -o "$curPath\output" -c
      #     # check outputs, if empty then fail the step
      #     if ((Get-ChildItem -Path .\output\).Count -eq 0) {
      #       Write-Error "No output files generated"
      #       exit 1
      #     }
      #     Compress-Archive -Path .\output\* -DestinationPath SpriteFontOutput.zip
      - name: Compile spritefont using mgcb
        shell: pwsh
        run: |
          dotnet tool install -g dotnet-mgcb
          mkdir output
          ls ${{ steps.schema-info.outputs.filename }}
          mgcb /build:${{ steps.schema-info.outputs.filename }} /outputDir:output /intermediateDir:obj/DesktopGL
          Compress-Archive -Path .\output\* -DestinationPath SpriteFontOutput.zip
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: SpriteFontOutput
          path: SpriteFontOutput.zip
          retention-days: 30
